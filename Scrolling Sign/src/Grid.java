import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import javax.swing.JComponent;

/**
 * A grid of squares, represented by a Color[][].
 * The background color is white.
 * @author Reed
 *
 */
public class Grid extends JComponent {
	private static final long serialVersionUID = 2892865424401791072L;
	private Color[][] squares;
	private int size = 10;
	private int squarePixelSize = 50;

	public Grid() {
		squares = new Color[size][size];
		this.setPreferredSize(new Dimension
				(squarePixelSize * size, squarePixelSize * size));

		squares = makeBlankGrid(size);
	}

	public Grid(int size, int squarePixelSize) {
		this.size = size;
		this.squarePixelSize = squarePixelSize;

		squares = new Color[size][size];
		this.setPreferredSize(new Dimension
				(squarePixelSize * size, squarePixelSize * size));

		squares = makeBlankGrid(size);
	}

	public Grid(Color[][] arr) {
		int size = arr.length;

		squares = arr;
		this.setPreferredSize(new Dimension
				(squarePixelSize * size, squarePixelSize * size));
	}

	public void paint(Graphics g) {
		super.paint(g);

		//Squares
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				g.setColor(squares[i][j]);
				g.fillRect(i * squarePixelSize, j * squarePixelSize,
						squarePixelSize, squarePixelSize);
			}
		}

		//Lines
		for (int i = 0; i < size; i++) {
			g.setColor(Color.BLACK);
			if (i != 0) {
				g.drawLine(i * squarePixelSize, 0, i * squarePixelSize, squarePixelSize * size);
			}
			if (i != 0) {
				g.drawLine(0, i * squarePixelSize, squarePixelSize * size, i * squarePixelSize);
			}
		}
	}

	/**
	 * Draws a rectangle at specified coordinates.
	 * @param x - x coord
	 * @param y - y coord
	 * @param color - Color of rectangle to be drawn
	 * @return the current object
	 */
	public Grid drawRect(int x, int y, Color color) {
		squares[x][y] = color;
		this.repaint();

		return this;
	}

	/**
	 * Draws a rectangle at specified coordinates, in red.
	 * @param x - x coord
	 * @param y - y coord
	 * @return the current object
	 */
	public Grid drawRect(int x, int y) {
		squares[x][y] = Color.RED;
		this.repaint();

		return this;
	}

	/**
	 * Clears the grid.
	 * @param bgColor - Color to set the grid to.
	 * @return the current object
	 */
	public Grid clearGrid(Color bgColor) {
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				squares[i][j] = bgColor;
			}
		}
		this.repaint();

		return this;
	}

	/**
	 * Clears the grid, using white as a default color. 
	 * @return the current object
	 */
	public Grid clearGrid() {
		clearGrid(Color.WHITE);
		return this;
	}

	/**
	 * Toggles the color located at point x, y. Red if white, white if red.
	 * @param x - x coordinate
	 * @param y - y coordinate
	 */
	public void toggle(int x, int y) {
		if (squares[x][y] == Color.WHITE) {
			drawRect(x, y, Color.RED);
		} else {
			drawRect(x, y, Color.WHITE);
		}
	}

	/**
	 * Translates a MouseEvent point into the corresponding coordinate on this Grid
	 * @param p The Point the mouse was clicked on
	 * @return [x, y] coordinate of the clicked square
	 */
	public int[] gridLocation(Point p) {
		int[] container = new int[2];
		container[0] = (p.x / squarePixelSize);
		container[1] = (p.y / squarePixelSize);

		/* System.out.println(p + " into [" + container[0] + ", " +
				container[1] + "]."); */

		return container;
	}

	/**
	 * Save the current coordinates to a string of the form
	 * "size:{grid size}|{(x1,y1)(x2,y2)...}"
	 * @return The string generated by the current grid
	 */
	public String coordDump() {
		String toReturn = "size:" + this.size + "|";

		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				if (squares[i][j] != Color.WHITE) {
					toReturn += "(" + i + "," + j + ")";
				}
			}
		}

		return toReturn;
	}



	/**
	 * Set this grid use the supplied Color[][] to display its colors.
	 * Sets the size of this grid to the size of the incoming array.
	 * @param in - Array to set to
	 */
	public void setGrid(Color[][] in) {
		squares = in;
		this.size = in.length;

		this.setPreferredSize(new Dimension
				(squarePixelSize * size, squarePixelSize * size));
		this.repaint();
	}

	/**
	 * Set the size of the grid. Also sets preferred window size.
	 * Clears the contents of the grid in the process.
	 * @param size - Size to set to
	 */
	public void setSize(int size) {
		this.size = size;
		squares = makeBlankGrid(size);
		this.setPreferredSize(new Dimension
				(squarePixelSize * size, squarePixelSize * size));
	}

	/**
	 * Creates a "blank" grid, e.g. all squares are White.
	 * @param size The size of the grid to create
	 * @return The blank grid.
	 */
	public static Color[][] makeBlankGrid(int size) {
		Color[][] toReturn = new Color[size][size];

		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				toReturn[i][j] = Color.WHITE;
			}
		}

		return toReturn;
	}

	/**
	 * Parse the grid layout saved by coordDump() into a Color array that represents the grid.
	 * @param s The parsed string
	 * @return A Color array to be used to set a Grid.
	 */
	public static Color[][] parseCoordDump(String s) {
		int size = Integer.parseInt(s.substring(s.indexOf(":") + 1, s.indexOf("|")));
		Color[][] toReturn = new Color[size][size];

		//initialize
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				toReturn[i][j] = Color.WHITE;
			}
		}

		do {
			try {
				String point = s.substring(s.indexOf("(") + 1, s.indexOf(")")); //x,y
				int x = Integer.parseInt(point.substring(0, point.indexOf(",")));
				int y = Integer.parseInt(point.substring(point.indexOf(",") + 1));
				toReturn[x][y] = Color.RED;

				s = s.substring(s.indexOf(")") + 1);
			} catch (StringIndexOutOfBoundsException e) {
				//Empty grid (or space character)
				break;
			}
		} while(s.length() > 0);

		return toReturn;
	}

	/**
	 * Reads a saved grid stored in a file.
	 * Example filename: "letters/a.txt"
	 * @param filename The filename of the grid
	 * @return The grid found in the file
	 * @throws IOException If file is not found
	 */
	public static Color[][] readGrid(String filename) throws IOException {		
		BufferedReader br = new BufferedReader(new FileReader(filename));
		String dmp = br.readLine();

		br.close();

		return Grid.parseCoordDump(dmp);
	}

	/**
	 * Prints a grid in a more readable format.
	 * Format: "(x, y):{color}" where color is either W (white) or R (red)
	 * @param grid The grid to read
	 * @return The string representation
	 */
	public static String readGrid(Color[][] grid) {
		String toReturn = "";
		int size = grid.length;

		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				toReturn += "(" + i + ", " + j + "):" +
						(grid[i][j] == Color.RED ? "R" : "W") + " ";
			}
		}

		return toReturn;
	}

	public String toString() {
		return Grid.readGrid(squares);
	}

	/**
	 * Immediately repaints the Grid.
	 */
	public void forceRepaint() {
		this.paintImmediately(new Rectangle(size * squarePixelSize, size * squarePixelSize));
	}
}
